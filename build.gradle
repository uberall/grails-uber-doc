buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    }
}

version "3.1.1"
group "org.grails.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"

jar {
    exclude "sample/**/**"
}

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    provided "org.springframework.boot:spring-boot-autoconfigure"
    provided "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-logging"
    provided "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.grails:grails-core"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin:3.1.8"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-test-mixins:3.3.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

grailsPublish {
    user = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
    key = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''
    userOrg = 'uberall'
    githubSlug = 'uberall/grails-uber-doc'
    license {
        name = 'BSD'
    }
    title = "UberDoc - Rest-API Documentation"
    desc = '''\
            uberDoc is a very simple solution for creating API documentation based on annotations in domain objects and controllers, and Grails' message system.
            It goes through controllers, finds resources, fetches all used objects, and extracts all parameters, headers, errors, etc.
            For more documentation, see our GitHub repository.
            '''
    developers = ["Florian Langenhahn": "florian.langenhahn@uberall.com",
                  "Florian Huebner"   : "florian@uberall.com",
                  "Philipp Eschenbach": "philipp@uberall.com",
                  "Steffen Zels"      : "steffen@uberall.com"]
}
